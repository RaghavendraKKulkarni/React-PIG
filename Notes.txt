|commands to run
npm install 
npm install -d parcel
npm install react
npm install react-dom

npx parcel index.html  -> to run the app on localhost

Instead of running this above command, we can give alias in package.json like below and run it
"scripts": {
    "start":"parcel index.html",
    "build": "parcel build index.html",
    "test": "jest"
  }

Bundlar -> webpack, parcel are some of bundlers that bundles all of js, html, css into one and ships it.

we will use parcel bundler.


package.json -> package of npm that keeps track of all dependency and it's versions
package-lock.json -> has all the specific versions that are currently used in the project


#Parcel bundler
- Dev build 
- Local Server
- HMR- Hot deployment Replacement
- File watching Algorithm - written in C++
- catching - builds fast
- Also does image optimisation
- Minification of all files for prod build
- compress files to smaller size 
- consistent hashing
- code splitting
- Differential bundling - app can be opened in any browsers/ versions
- can provide https server as well for test
- Diagnostic errors
- Tree Shaking - It removes unused code before shipping and bundles



import React from "react";
import ReactDOM from "react-dom/client";

const heading = React.createElement(
  "h1",
  {
    id: "heading",
    xyz: "random attribute",
  },
  "Hello world from React!!"
);

//This is how react internally works
//heading variable is a react js object not an html element
const root = ReactDOM.createRoot(document.getElementById("root"));

//jsx is not html in js, it is html like syntax
//jsx is not understood by browser js engine, parcel transpiles this code jsx to js
// parcel uses babel to make this conversion.
const jsxHeading = <h1 id="heading">Namaste React using JSX</h1>;

//React component
//classbased (old)  
//functional component (new)
//{number}-> can write js inside html using {}
const number =1000;
const HeadingFunctionalComponent=()=>{
     return (
     <div id="container">
        {Title()}
        <Title/>
     <h2 id="heading" className="heading">
        Namaste React functional component {number}</h2>
        </div>
        );
}

const Title=()=>{
    return <h1 id="heading" className="heading">
        Namaste Title</h1>;
}

root.render(<HeadingFunctionalComponent/>);





Two types of exports/Imports,
Default,
export default component;
import component from "path";

named,
export const component;
import {component} from "path";


React Hooks
-normal js utility functions
-useState() - state variables, if this variable changes -> UI will be re-rendered
-useEffect()

why React is fast-> because of dom manipulation
-reconcilation algorithm -> React Fiber

virtual dom is a representation of Actual dom -> jsx which is js objects
So if any changes happens, it simply updates this js object 
how it knows changes -> it compares previous virtual node and current virtual node
this is done by diff algorithm-> react fiber

